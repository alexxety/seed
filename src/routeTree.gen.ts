/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/routes/__root'
import { Route as CheckoutRouteImport } from './app/routes/checkout'
import { Route as CartRouteImport } from './app/routes/cart'
import { Route as AdminRouteImport } from './app/routes/admin'
import { Route as IndexRouteImport } from './app/routes/index'
import { Route as SuccessOrderNumberRouteImport } from './app/routes/success.$orderNumber'
import { Route as ProductIdRouteImport } from './app/routes/product.$id'
import { Route as AdminLoginRouteImport } from './app/routes/admin/login'
import { Route as AdminAdminRouteImport } from './app/routes/admin/_admin'
import { Route as AdminAdminSettingsRouteImport } from './app/routes/admin/_admin/settings'
import { Route as AdminAdminProductsRouteImport } from './app/routes/admin/_admin/products'
import { Route as AdminAdminOrdersRouteImport } from './app/routes/admin/_admin/orders'
import { Route as AdminAdminCategoriesRouteImport } from './app/routes/admin/_admin/categories'

const CheckoutRoute = CheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SuccessOrderNumberRoute = SuccessOrderNumberRouteImport.update({
  id: '/success/$orderNumber',
  path: '/success/$orderNumber',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductIdRoute = ProductIdRouteImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminRoute = AdminAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminSettingsRoute = AdminAdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminAdminRoute,
} as any)
const AdminAdminProductsRoute = AdminAdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminAdminRoute,
} as any)
const AdminAdminOrdersRoute = AdminAdminOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminAdminRoute,
} as any)
const AdminAdminCategoriesRoute = AdminAdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminAdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminAdminRouteWithChildren
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/admin/login': typeof AdminLoginRoute
  '/product/$id': typeof ProductIdRoute
  '/success/$orderNumber': typeof SuccessOrderNumberRoute
  '/admin/categories': typeof AdminAdminCategoriesRoute
  '/admin/orders': typeof AdminAdminOrdersRoute
  '/admin/products': typeof AdminAdminProductsRoute
  '/admin/settings': typeof AdminAdminSettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminAdminRouteWithChildren
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/admin/login': typeof AdminLoginRoute
  '/product/$id': typeof ProductIdRoute
  '/success/$orderNumber': typeof SuccessOrderNumberRoute
  '/admin/categories': typeof AdminAdminCategoriesRoute
  '/admin/orders': typeof AdminAdminOrdersRoute
  '/admin/products': typeof AdminAdminProductsRoute
  '/admin/settings': typeof AdminAdminSettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/admin/_admin': typeof AdminAdminRouteWithChildren
  '/admin/login': typeof AdminLoginRoute
  '/product/$id': typeof ProductIdRoute
  '/success/$orderNumber': typeof SuccessOrderNumberRoute
  '/admin/_admin/categories': typeof AdminAdminCategoriesRoute
  '/admin/_admin/orders': typeof AdminAdminOrdersRoute
  '/admin/_admin/products': typeof AdminAdminProductsRoute
  '/admin/_admin/settings': typeof AdminAdminSettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/cart'
    | '/checkout'
    | '/admin/login'
    | '/product/$id'
    | '/success/$orderNumber'
    | '/admin/categories'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/cart'
    | '/checkout'
    | '/admin/login'
    | '/product/$id'
    | '/success/$orderNumber'
    | '/admin/categories'
    | '/admin/orders'
    | '/admin/products'
    | '/admin/settings'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/cart'
    | '/checkout'
    | '/admin/_admin'
    | '/admin/login'
    | '/product/$id'
    | '/success/$orderNumber'
    | '/admin/_admin/categories'
    | '/admin/_admin/orders'
    | '/admin/_admin/products'
    | '/admin/_admin/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  CartRoute: typeof CartRoute
  CheckoutRoute: typeof CheckoutRoute
  ProductIdRoute: typeof ProductIdRoute
  SuccessOrderNumberRoute: typeof SuccessOrderNumberRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/success/$orderNumber': {
      id: '/success/$orderNumber'
      path: '/success/$orderNumber'
      fullPath: '/success/$orderNumber'
      preLoaderRoute: typeof SuccessOrderNumberRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$id': {
      id: '/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof ProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_admin': {
      id: '/admin/_admin'
      path: ''
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAdminRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_admin/settings': {
      id: '/admin/_admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminAdminSettingsRouteImport
      parentRoute: typeof AdminAdminRoute
    }
    '/admin/_admin/products': {
      id: '/admin/_admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminAdminProductsRouteImport
      parentRoute: typeof AdminAdminRoute
    }
    '/admin/_admin/orders': {
      id: '/admin/_admin/orders'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminAdminOrdersRouteImport
      parentRoute: typeof AdminAdminRoute
    }
    '/admin/_admin/categories': {
      id: '/admin/_admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminAdminCategoriesRouteImport
      parentRoute: typeof AdminAdminRoute
    }
  }
}

interface AdminAdminRouteChildren {
  AdminAdminCategoriesRoute: typeof AdminAdminCategoriesRoute
  AdminAdminOrdersRoute: typeof AdminAdminOrdersRoute
  AdminAdminProductsRoute: typeof AdminAdminProductsRoute
  AdminAdminSettingsRoute: typeof AdminAdminSettingsRoute
}

const AdminAdminRouteChildren: AdminAdminRouteChildren = {
  AdminAdminCategoriesRoute: AdminAdminCategoriesRoute,
  AdminAdminOrdersRoute: AdminAdminOrdersRoute,
  AdminAdminProductsRoute: AdminAdminProductsRoute,
  AdminAdminSettingsRoute: AdminAdminSettingsRoute,
}

const AdminAdminRouteWithChildren = AdminAdminRoute._addFileChildren(
  AdminAdminRouteChildren,
)

interface AdminRouteChildren {
  AdminAdminRoute: typeof AdminAdminRouteWithChildren
  AdminLoginRoute: typeof AdminLoginRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminRoute: AdminAdminRouteWithChildren,
  AdminLoginRoute: AdminLoginRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  CartRoute: CartRoute,
  CheckoutRoute: CheckoutRoute,
  ProductIdRoute: ProductIdRoute,
  SuccessOrderNumberRoute: SuccessOrderNumberRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
