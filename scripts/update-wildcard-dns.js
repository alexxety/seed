#!/usr/bin/env node
require('dotenv').config();
const Cloudflare = require('cloudflare');

const cloudflare = new Cloudflare({
  apiToken: process.env.CLOUDFLARE_API_TOKEN,
});

const ZONE_ID = process.env.CLOUDFLARE_ZONE_ID;
const DOMAIN = 'x-bro.com';
const SERVER_IP = '46.224.19.173';

async function updateWildcardDNS() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ wildcard –∑–∞–ø–∏—Å–∏ *.x-bro.com...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ DNS –∑–∞–ø–∏—Å–∏
    const records = await cloudflare.dns.records.list({
      zone_id: ZONE_ID,
      name: `*.${DOMAIN}`,
      type: 'A',
    });

    if (!records.result || records.result.length === 0) {
      console.log('‚ùå Wildcard –∑–∞–ø–∏—Å—å *.x-bro.com –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      console.log('üìù –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é wildcard –∑–∞–ø–∏—Å—å –±–µ–∑ proxy...\n');

      const newRecord = await cloudflare.dns.records.create({
        zone_id: ZONE_ID,
        type: 'A',
        name: '*',
        content: SERVER_IP,
        ttl: 1, // Auto
        proxied: false, // DNS only (—Å–µ—Ä–æ–µ –æ–±–ª–∞—á–∫–æ)
      });

      console.log('‚úÖ Wildcard –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:');
      console.log(`   Name: ${newRecord.name}`);
      console.log(`   Content: ${newRecord.content}`);
      console.log(
        `   Proxied: ${newRecord.proxied} (${newRecord.proxied ? 'üü† –æ—Ä–∞–Ω–∂–µ–≤–æ–µ' : '‚ö™ —Å–µ—Ä–æ–µ'} –æ–±–ª–∞—á–∫–æ)`
      );
      console.log(`   ID: ${newRecord.id}\n`);

      return;
    }

    const wildcardRecord = records.result[0];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ wildcard –∑–∞–ø–∏—Å—å:');
    console.log(`   Name: ${wildcardRecord.name}`);
    console.log(`   Content: ${wildcardRecord.content}`);
    console.log(
      `   Proxied: ${wildcardRecord.proxied} (${wildcardRecord.proxied ? 'üü† –æ—Ä–∞–Ω–∂–µ–≤–æ–µ' : '‚ö™ —Å–µ—Ä–æ–µ'} –æ–±–ª–∞—á–∫–æ)`
    );
    console.log(`   ID: ${wildcardRecord.id}\n`);

    if (!wildcardRecord.proxied) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–µ–∑ proxy (—Å–µ—Ä–æ–µ –æ–±–ª–∞—á–∫–æ)');
      console.log('   –ù–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!\n');
      return;
    }

    console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å: –æ—Ç–∫–ª—é—á–∞–µ–º Cloudflare proxy...\n');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å - –æ—Ç–∫–ª—é—á–∞–µ–º proxy
    const updatedRecord = await cloudflare.dns.records.update(wildcardRecord.id, {
      zone_id: ZONE_ID,
      type: 'A',
      name: '*',
      content: SERVER_IP,
      ttl: 1,
      proxied: false, // DNS only (—Å–µ—Ä–æ–µ –æ–±–ª–∞—á–∫–æ)
    });

    console.log('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:');
    console.log(`   Name: ${updatedRecord.name}`);
    console.log(`   Content: ${updatedRecord.content}`);
    console.log(
      `   Proxied: ${updatedRecord.proxied} (${updatedRecord.proxied ? 'üü† –æ—Ä–∞–Ω–∂–µ–≤–æ–µ' : '‚ö™ —Å–µ—Ä–æ–µ'} –æ–±–ª–∞—á–∫–æ)`
    );
    console.log(`   TTL: ${updatedRecord.ttl === 1 ? 'Auto' : updatedRecord.ttl}\n`);

    console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã *.x-bro.com —Ä–µ–∑–æ–ª–≤—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
    console.log('‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.\n');

    console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç:');
    console.log('   dig demo.x-bro.com +short');
    console.log('   # –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å: 46.224.19.173\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('   Response:', JSON.stringify(error.response, null, 2));
    }
    process.exit(1);
  }
}

updateWildcardDNS();
