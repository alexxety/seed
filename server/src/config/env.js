const { z } = require('zod');

// ENV –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Zod
const envSchema = z.object({
  // CORE
  NODE_ENV: z.enum(['development', 'production', 'test']).default('production'),
  PORT: z.string().transform(Number).default('3000'),
  DATABASE_URL: z.string().min(1, 'DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),

  // SECURITY
  JWT_SECRET: z.string().min(32, 'JWT_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞'),

  // TELEGRAM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
  TELEGRAM_BOT_TOKEN: z.string().optional(),
  TELEGRAM_CHAT_ID: z.string().optional(),

  // CLOUDFLARE
  CLOUDFLARE_API_TOKEN: z.string().optional(),
  CLOUDFLARE_ZONE_ID: z.string().optional(),
});

function validateEnv() {
  try {
    const parsed = envSchema.parse(process.env);
    console.log('‚úÖ ENV –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    return parsed;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ENV:');
    if (error instanceof z.ZodError) {
      error.errors.forEach(err => {
        console.error(`  - ${err.path.join('.')}: ${err.message}`);
      });
    }
    console.error('\nüõë –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
    process.exit(1);
  }
}

module.exports = { validateEnv };
