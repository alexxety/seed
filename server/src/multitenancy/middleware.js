const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * –°–æ–∑–¥–∞—Ç—å Prisma –∫–ª–∏–µ–Ω—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º search_path –¥–ª—è tenant
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SET LOCAL –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 *
 * @param {object} req - Express request —Å req.context.tenant
 * @returns {Promise<PrismaClient>} - Prisma client –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
async function getTenantDB(req) {
  if (!req.context || !req.context.tenant) {
    // –ï—Å–ª–∏ –Ω–µ—Ç tenant - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π prisma –¥–ª—è public —Å—Ö–µ–º—ã
    return prisma;
  }

  const schema = req.context.tenant.schema;

  // –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å SET LOCAL
  // SET LOCAL –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const tenantPrisma = prisma.$extends({
    query: {
      async $allOperations({ operation, model, args, query }) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const [, result] = await prisma.$transaction([
          prisma.$executeRawUnsafe(`SET LOCAL search_path TO "${schema}", public`),
          query(args),
        ]);
        return result;
      },
    },
  });

  return tenantPrisma;
}

/**
 * Express middleware –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è req.db
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–æ—É—Ç–∞—Ö:
 * app.get('/api/tenant/products', async (req, res) => {
 *   const products = await req.db.product.findMany();
 *   res.json({ products });
 * });
 */
async function attachTenantDB(req, res, next) {
  try {
    // –°–æ–∑–¥–∞—ë–º req.db –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö
    req.db = await getTenantDB(req);

    if (req.context && req.context.tenant) {
      console.log(`üóÑÔ∏è  DB context: ${req.context.tenant.schema}`);
    } else {
      console.log('üóÑÔ∏è  DB context: public (–±–µ–∑ tenant)');
    }

    next();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DB context: ${error.message}`);
    return res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î',
      message: error.message
    });
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å SET LOCAL search_path –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –∏ —É—Ç–∏–ª–∏—Ç–∞—Ö
 *
 * @param {string} schema - –∏–º—è —Å—Ö–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "t_abc_123")
 * @param {function} callback - async —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç prisma –∫–ª–∏–µ–Ω—Ç
 */
async function withTenantSchema(schema, callback) {
  return await prisma.$transaction(async (tx) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await tx.$executeRawUnsafe(`SET LOCAL search_path TO "${schema}", public`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º callback —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    return await callback(tx);
  });
}

/**
 * LEGACY: —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ req.db –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
 * @deprecated
 */
async function setSearchPath(req, prismaClient = null) {
  console.warn('‚ö†Ô∏è  setSearchPath() deprecated - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ req.db');

  const client = prismaClient || prisma;

  if (req.context && req.context.tenant) {
    const schema = req.context.tenant.schema;
    await client.$executeRawUnsafe(`SET search_path TO "${schema}", public`);
    return client;
  }

  await client.$executeRawUnsafe(`SET search_path TO public`);
  return client;
}

/**
 * LEGACY: —Å—Ç–∞—Ä—ã–π middleware
 * @deprecated
 */
function autoSetSearchPath(req, res, next) {
  // –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º attachTenantDB –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
  next();
}

module.exports = {
  getTenantDB,
  attachTenantDB,
  withTenantSchema,
  // Legacy exports
  setSearchPath,
  autoSetSearchPath,
};
