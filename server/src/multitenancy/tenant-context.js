const { getTenantBySlug } = require('../db/tenants');

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å tenant –ø–æ –ø–æ–¥–¥–æ–º–µ–Ω—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É X-Tenant
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - Host: myshop.x-bro.com ‚Üí slug="myshop"
 * - Header: X-Tenant: myshop ‚Üí slug="myshop"
 */
async function resolveTenant(req) {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Tenant (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ API)
  const tenantHeader = req.headers['x-tenant'];
  if (tenantHeader) {
    const tenant = await getTenantBySlug(tenantHeader);
    if (!tenant) {
      throw new Error(`Tenant "${tenantHeader}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    return tenant;
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ø–æ–¥–¥–æ–º–µ–Ω –∏–∑ Host
  const host = req.headers.host || '';
  const parts = host.split('.');

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const infraDomains = ['www', 'admin', 'seed', 'dev', 'dev-admin', 'deva'];

  if (parts.length >= 3) {
    const subdomain = parts[0];

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã
    if (infraDomains.includes(subdomain)) {
      return null;
    }

    // –ò—â–µ–º tenant –ø–æ slug
    const tenant = await getTenantBySlug(subdomain);
    if (!tenant) {
      throw new Error(`Tenant –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ "${subdomain}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    return tenant;
  }

  // –ù–µ—Ç tenant - —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω, –≥–ª–∞–≤–Ω–∞—è –∏ —Ç.–¥.)
  return null;
}

/**
 * Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ tenant context –≤ req.context
 */
async function setTenantContext(req, res, next) {
  try {
    const tenant = await resolveTenant(req);

    req.context = req.context || {};

    if (tenant) {
      req.context.tenant = {
        id: tenant.id,
        slug: tenant.slug,
        name: tenant.name,
        schema: `t_${tenant.id.replace(/-/g, '_')}`
      };
      console.log(`üè™ Tenant context: ${tenant.slug} (${tenant.id})`);
    } else {
      req.context.tenant = null;
      console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–±–µ–∑ tenant)');
    }

    next();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è tenant: ${error.message}`);
    return res.status(404).json({
      error: 'Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω',
      message: error.message
    });
  }
}

/**
 * Middleware: —Ç—Ä–µ–±—É–µ—Ç—Å—è tenant (403 –µ—Å–ª–∏ –Ω–µ—Ç)
 */
function requireTenant(req, res, next) {
  if (!req.context || !req.context.tenant) {
    return res.status(403).json({
      error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω',
      message: '–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç tenant context (–ø–æ–¥–¥–æ–º–µ–Ω –∏–ª–∏ X-Tenant –∑–∞–≥–æ–ª–æ–≤–æ–∫)'
    });
  }
  next();
}

module.exports = {
  resolveTenant,
  setTenantContext,
  requireTenant
};
