name: Cloudflare Cache Rules

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main
    paths:
      - '.github/workflows/cf-cache-rules.yml'

jobs:
  apply-cache-rules:
    name: Apply Cloudflare Cache Rules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mask sensitive tokens
        run: |
          echo "::add-mask::${{ secrets.CF_RULES_TOKEN }}"
          echo "::add-mask::${{ secrets.CLOUDFLARE_API_TOKEN }}"
          echo "::add-mask::${{ secrets.CLOUDFLARE_ZONE_ID }}"
          echo "‚úÖ Tokens masked"

      - name: Write Cache Rules JSON
        run: |
          cat > rules.json << 'EOF'
          {
            "rules": [
              {
                "action": "set_cache_settings",
                "action_parameters": {
                  "cache": false
                },
                "expression": "(http.request.uri.path eq \"/robots.txt\")",
                "description": "Bypass cache for robots.txt",
                "enabled": true
              },
              {
                "action": "set_cache_settings",
                "action_parameters": {
                  "cache": false
                },
                "expression": "(http.request.uri.path eq \"/sitemap.xml\")",
                "description": "Bypass cache for sitemap.xml",
                "enabled": true
              }
            ]
          }
          EOF

          echo "‚úÖ Cache rules JSON created"
          echo ""
          echo "Rules to apply:"
          jq -r '.rules[] | "  - \(.description): \(.expression)"' rules.json

      # Commented out for future use: Assets caching rule
      # - name: Add Assets Caching Rule (optional)
      #   run: |
      #     jq '.rules += [{
      #       "action": "set_cache_settings",
      #       "action_parameters": {
      #         "cache": true,
      #         "edge_ttl": {
      #           "mode": "override_origin",
      #           "default": 2592000
      #         },
      #         "browser_ttl": {
      #           "mode": "respect_origin"
      #         }
      #       },
      #       "expression": "(http.request.uri.path matches \"^/assets/.*\")",
      #       "description": "Cache assets for 30 days",
      #       "enabled": true
      #     }]' rules.json > rules-with-assets.json
      #     mv rules-with-assets.json rules.json

      - name: Apply Cache Rules to Cloudflare
        env:
          CF_RULES_TOKEN: ${{ secrets.CF_RULES_TOKEN }}
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "üöÄ Applying cache rules to Cloudflare..."
          echo "   Zone ID: ${ZONE_ID:0:8}..." # Show only first 8 chars
          echo "   Token: ${CF_RULES_TOKEN:0:6}..." # Show only first 6 chars
          echo ""

          RESPONSE=$(curl -s -X PUT \
            "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/rulesets/phases/http_request_cache_settings/entrypoint" \
            -H "Authorization: Bearer ${CF_RULES_TOKEN}" \
            -H "Content-Type: application/json" \
            --data @rules.json)

          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" = "true" ]; then
            echo "‚úÖ Cache rules applied successfully"
            echo ""
            echo "Applied rules:"
            echo "$RESPONSE" | jq -r '.result.rules[] | "  ‚úì \(.description)"'
          else
            echo "‚ùå Failed to apply cache rules"
            echo ""
            echo "Errors:"
            echo "$RESPONSE" | jq -r '.errors[]? | "  - [\(.code)] \(.message)"'
            exit 1
          fi

      - name: Verify Cache Rules
        env:
          CF_RULES_TOKEN: ${{ secrets.CF_RULES_TOKEN }}
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "üîç Verifying applied cache rules..."
          echo ""

          RULESET=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/rulesets/phases/http_request_cache_settings/entrypoint" \
            -H "Authorization: Bearer ${CF_RULES_TOKEN}")

          SUCCESS=$(echo "$RULESET" | jq -r '.success')

          if [ "$SUCCESS" = "true" ]; then
            echo "‚úÖ Ruleset retrieved successfully"
            echo ""
            echo "Active cache rules:"
            echo "$RULESET" | jq -r '.result.rules[] | "  ‚Ä¢ \(.description)\n    Expression: \(.expression)\n    Enabled: \(.enabled)\n"'
          else
            echo "‚ö†Ô∏è  Could not retrieve ruleset"
            exit 1
          fi

      - name: Test Cache Status
        run: |
          echo "üß™ Testing cache status on live domains..."
          echo ""

          echo "üìå testshop.x-bro.com (Proxied - should show BYPASS):"
          echo "   /robots.txt:"
          curl -sI https://testshop.x-bro.com/robots.txt | grep -i "cf-cache-status" || echo "   No cf-cache-status header (checking...)"
          echo ""
          echo "   /sitemap.xml:"
          curl -sI https://testshop.x-bro.com/sitemap.xml | grep -i "cf-cache-status" || echo "   No cf-cache-status header (checking...)"
          echo ""

          echo "üìå demo.x-bro.com (DNS only - no CF headers expected):"
          echo "   /robots.txt:"
          curl -sI https://demo.x-bro.com/robots.txt | grep -i "server:" || true
          echo ""

          echo "‚úÖ Cache status test completed"
          echo ""
          echo "Note: If cf-cache-status shows MISS or HIT instead of BYPASS,"
          echo "      run the purge-cache job to clear existing cache."

  purge-cache:
    name: Purge SEO Endpoints Cache
    runs-on: ubuntu-latest
    needs: apply-cache-rules
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Mask sensitive tokens
        run: |
          echo "::add-mask::${{ secrets.CLOUDFLARE_API_TOKEN }}"
          echo "::add-mask::${{ secrets.CLOUDFLARE_ZONE_ID }}"
          echo "‚úÖ Purge tokens masked"

      - name: Purge SEO files from cache
        env:
          CF_PURGE_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "üßπ Purging cache for SEO endpoints..."
          echo "   Zone ID: ${ZONE_ID:0:8}..."
          echo "   Token: ${CF_PURGE_TOKEN:0:6}..."
          echo ""

          RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/purge_cache" \
            -H "Authorization: Bearer ${CF_PURGE_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{
              "files": [
                "https://testshop.x-bro.com/robots.txt",
                "https://testshop.x-bro.com/sitemap.xml",
                "https://demo.x-bro.com/robots.txt",
                "https://demo.x-bro.com/sitemap.xml"
              ]
            }')

          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" = "true" ]; then
            echo "‚úÖ Cache purged successfully"
            echo ""
            echo "Purged files:"
            echo "  ‚Ä¢ testshop.x-bro.com/robots.txt"
            echo "  ‚Ä¢ testshop.x-bro.com/sitemap.xml"
            echo "  ‚Ä¢ demo.x-bro.com/robots.txt"
            echo "  ‚Ä¢ demo.x-bro.com/sitemap.xml"
          else
            echo "‚ùå Cache purge failed"
            echo ""
            echo "Errors:"
            echo "$RESPONSE" | jq -r '.errors[]? | "  - [\(.code)] \(.message)"'
            exit 1
          fi

      - name: Verify BYPASS status
        run: |
          echo ""
          echo "‚è≥ Waiting 5 seconds for cache to clear..."
          sleep 5
          echo ""
          echo "üîç Checking cache status after purge..."
          echo ""

          echo "testshop.x-bro.com/robots.txt:"
          CACHE_STATUS=$(curl -sI https://testshop.x-bro.com/robots.txt | grep -i "cf-cache-status" || echo "cf-cache-status: NOT FOUND")
          echo "  $CACHE_STATUS"

          echo ""
          echo "testshop.x-bro.com/sitemap.xml:"
          CACHE_STATUS=$(curl -sI https://testshop.x-bro.com/sitemap.xml | grep -i "cf-cache-status" || echo "cf-cache-status: NOT FOUND")
          echo "  $CACHE_STATUS"
          echo ""

          echo "Expected: cf-cache-status: BYPASS"
          echo "If showing MISS, rules are working (first request after purge)"
